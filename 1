local player = game:GetService("Players").LocalPlayer
local UIS = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")

-- Генерация случайного имени для GUI
local function generateRandomName()
    local chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    local name = ""
    for i = 1, 16 do
        name = name .. string.sub(chars, math.random(1, #chars), 1)
    end
    return name
end

-- Очистка старых GUI
for _, child in pairs(CoreGui:GetChildren()) do
    if child:IsA("ScreenGui") and child.Name:find("UI_") then
        child:Destroy()
    end
end

-- Шифрование имен элементов
local function encryptName(name)
    local encrypted = ""
    for i = 1, #name do
        encrypted = encrypted .. string.char(string.byte(name, i) + 5)
    end
    return encrypted
end

-- Защитные атрибуты
local function addProtectionAttributes(instance)
    instance:SetAttribute("RobloxSecureUI", true)
    instance:SetAttribute("CoreScriptProtected", true)
    instance:SetAttribute("__FakeFlag1", "AntiCheatBypass")
    instance:SetAttribute("__FakeFlag2", "SecureScript")
    instance:SetAttribute("__FakeFlag3", "CoreGuiProtected")
end

_G.mainFrame = nil

local activeCategoryLabel
local moduleNameLabel
local slashLabel

local API = {
    modules = {},
    settings = {},
    callbacks = {}
}

function API:registerModule(category, moduleData)
    self.modules[category] = self.modules[category] or {}
    table.insert(self.modules[category], moduleData)
end

function API:registerSettings(moduleName, settingsTable)
    self.settings[moduleName] = {settings = settingsTable}
end

local moduleSystem = {
    activeCategory = nil,
    activeModule = nil,
    activeModuleName = nil,
    modules = API.modules
}

local moduleSettings = API.settings

local function tweenColor(object, property, targetColor, duration)
    local tweenInfo = TweenInfo.new(
        duration or 0.2,
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(object, tweenInfo, {[property] = targetColor})
    tween:Play()
    return tween
end

local function tweenTransparency(object, property, targetValue, duration)
    local tweenInfo = TweenInfo.new(
        duration or 0.2,
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(object, tweenInfo, {[property] = targetValue})
    tween:Play()
    return tween
end

local function tweenSize(object, property, targetSize, duration)
    local tweenInfo = TweenInfo.new(
        duration or 0.2,
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(object, tweenInfo, {[property] = targetSize})
    tween:Play()
    return tween
end

local function createSlider(parent, setting, position)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 600, 0, 120)
    frame.Position = position
    frame.BackgroundTransparency = 1
    frame.Parent = parent
    frame.Name = encryptName("SliderFrame")

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 0.2, 10)
    label.Position = UDim2.new(0, 15, 0.3, 0)
    label.Text = setting.name
    label.TextColor3 = Color3.fromRGB(142, 142, 142)
    label.Font = Enum.Font.SourceSansBold
    label.TextSize = 22
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.BackgroundTransparency = 1
    label.Parent = frame
    label.Name = encryptName("SliderLabel")

    local valueDisplay = Instance.new("TextLabel")
    valueDisplay.Size = UDim2.new(1, 0, 0.2, 0)
    valueDisplay.Position = UDim2.new(0, -5, 0.3, 0)
    valueDisplay.Text = tostring(setting.default) .. (setting.isPercentage and "%" or "")
    valueDisplay.TextColor3 = Color3.fromRGB(142, 142, 142)
    valueDisplay.Font = Enum.Font.SourceSans
    valueDisplay.TextSize = 22
    valueDisplay.TextXAlignment = Enum.TextXAlignment.Right
    valueDisplay.BackgroundTransparency = 1
    valueDisplay.Parent = frame
    valueDisplay.Name = encryptName("ValueDisplay")

    local sliderBackground = Instance.new("Frame")
    sliderBackground.Size = UDim2.new(1, -11, 0, 6)
    sliderBackground.Position = UDim2.new(0, 10, 0.6, -3)
    sliderBackground.BackgroundColor3 = Color3.fromRGB(142, 142, 142)
    sliderBackground.BorderSizePixel = 0
    sliderBackground.Parent = frame
    sliderBackground.Name = encryptName("SliderBackground")

    local sliderActive = Instance.new("Frame")
    sliderActive.Size = UDim2.new((setting.default - setting.min) / (setting.max - setting.min), 0, 1, 0)
    sliderActive.BackgroundColor3 = Color3.fromRGB(255, 75, 75)
    sliderActive.BorderSizePixel = 0
    sliderActive.Parent = sliderBackground
    sliderActive.Name = encryptName("SliderActive")

    local sliderBackgroundCorner = Instance.new("UICorner")
    sliderBackgroundCorner.CornerRadius = UDim.new(0, 4)
    sliderBackgroundCorner.Parent = sliderBackground

    local sliderActiveCorner = Instance.new("UICorner") 
    sliderActiveCorner.CornerRadius = UDim.new(0, 4)
    sliderActiveCorner.Parent = sliderActive

    local sliderCircle = Instance.new("Frame")
    sliderCircle.Size = UDim2.new(0, 12, 0, 12)
    sliderCircle.Position = UDim2.new((setting.default - setting.min) / (setting.max - setting.min), -6, 0.5, -6)
    sliderCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderCircle.BorderSizePixel = 0
    sliderCircle.Parent = sliderBackground
    sliderCircle.Name = encryptName("SliderCircle")

    local circleCorner = Instance.new("UICorner")
    circleCorner.CornerRadius = UDim.new(1, 0)
    circleCorner.Parent = sliderCircle

    local dragging = false

    local function updateSlider(value)
        local relativePos = (value - setting.min) / (setting.max - setting.min)
        sliderCircle.Position = UDim2.new(relativePos, -6, 0.5, -6)
        sliderActive.Size = UDim2.new(relativePos, 0, 1, 0)
        valueDisplay.Text = tostring(value) .. (setting.isPercentage and "%" or "")
        if setting.callback then
            setting.callback(value)
        end
    end

    sliderCircle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            sliderCircle:TweenSize(UDim2.new(0, 15, 0, 15), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
        end
    end)

    sliderCircle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
            sliderCircle:TweenSize(UDim2.new(0, 12, 0, 12), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = input.Position.X
            local sliderStart = sliderBackground.AbsolutePosition.X
            local sliderEnd = sliderStart + sliderBackground.AbsoluteSize.X
            local newX = math.clamp(mousePos, sliderStart, sliderEnd)

            local relativePos = (newX - sliderStart) / sliderBackground.AbsoluteSize.X
            local newValue = math.floor(relativePos * (setting.max - setting.min) + setting.min)
            updateSlider(newValue)
        end
    end)

    updateSlider(setting.default)
    return frame
end

local function createToggle(parent, setting, position)
    local outerFrame = Instance.new("Frame")
    outerFrame.Size = UDim2.new(0, 300, 0, 50)
    outerFrame.Position = position
    outerFrame.BackgroundTransparency = 1
    outerFrame.BorderSizePixel = 0
    outerFrame.Parent = parent
    outerFrame.Name = encryptName("ToggleFrame")

    local enableLabel = Instance.new("TextLabel")
    enableLabel.Size = UDim2.new(0.2, 0, 1, 0)
    enableLabel.Position = UDim2.new(0, 10, 0, 0)
    enableLabel.Text = setting.name
    enableLabel.TextColor3 = Color3.fromRGB(142, 142, 142)
    enableLabel.Font = Enum.Font.SourceSansBold
    enableLabel.TextSize = 22
    enableLabel.TextXAlignment = Enum.TextXAlignment.Left
    enableLabel.BackgroundTransparency = 1
    enableLabel.Parent = outerFrame
    enableLabel.Name = encryptName("ToggleLabel")

    local switchTrack = Instance.new("Frame")
    switchTrack.Size = UDim2.new(0, 40, 0, 20)
    switchTrack.Position = UDim2.new(0.8, 320, 0.5, -10)
    switchTrack.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    switchTrack.BorderSizePixel = 0
    switchTrack.Parent = outerFrame
    switchTrack.Name = encryptName("SwitchTrack")

    local trackCorner = Instance.new("UICorner")
    trackCorner.CornerRadius = UDim.new(1, 0)
    trackCorner.Parent = switchTrack

    local switchCircle = Instance.new("Frame")
    switchCircle.Size = UDim2.new(0, 18, 0, 18)
    switchCircle.Position = UDim2.new(0, 1, 0, 1)
    switchCircle.BackgroundColor3 = Color3.fromRGB(142, 142, 142)
    switchCircle.BorderSizePixel = 0
    switchCircle.Parent = switchTrack
    switchCircle.Name = encryptName("SwitchCircle")

    local circleCorner = Instance.new("UICorner")
    circleCorner.CornerRadius = UDim.new(1, 0)
    circleCorner.Parent = switchCircle

    local isEnabled = setting.default
    if isEnabled then
        switchCircle.Position = UDim2.new(1, -19, 0, 1)
        switchCircle.BackgroundColor3 = Color3.fromRGB(255, 75, 75)
    end

    switchTrack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isEnabled = not isEnabled
            if isEnabled then
                switchCircle:TweenPosition(UDim2.new(1, -19, 0, 1), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
                switchCircle.BackgroundColor3 = Color3.fromRGB(255, 75, 75)
            else
                switchCircle:TweenPosition(UDim2.new(0, 1, 0, 1), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
                switchCircle.BackgroundColor3 = Color3.fromRGB(142, 142, 142)
            end
            if setting.callback then
                setting.callback(isEnabled)
            end
        end
    end)

    return outerFrame
end

local function showModuleSettings(parent, moduleName)
    local settingsContainer = _G.mainFrame:FindFirstChild(encryptName("SettingsContainer"))

    for _, child in pairs(settingsContainer:GetChildren()) do
        if not child:IsA("UICorner") then
            child:Destroy()
        end
    end

    if not API.settings[moduleName] and not moduleSettings[moduleName] then
        settingsContainer.Size = UDim2.new(0, 615, 0, 0)
        settingsContainer.BackgroundTransparency = 1
        return
    end

    local yOffset = 0
    local totalHeight = 0

    for _, setting in ipairs(moduleSettings[moduleName].settings) do
        if setting.type == "slider" then
            totalHeight = totalHeight + 60
        elseif setting.type == "toggle" then
            totalHeight = totalHeight + 45
        end
    end

    settingsContainer.BackgroundTransparency = 0
    settingsContainer.Size = UDim2.new(0, 615, 0, totalHeight + 30)

    for _, setting in ipairs(moduleSettings[moduleName].settings) do
        if setting.type == "slider" then
            local slider = createSlider(settingsContainer, setting, UDim2.new(0, 0, 0, yOffset))
            yOffset = yOffset + 30
        elseif setting.type == "toggle" then
            local toggle = createToggle(settingsContainer, setting, UDim2.new(0, 0, 0, yOffset))
            yOffset = yOffset + 45
        end
    end
end

local function createModuleButton(parent, moduleData)
    local moduleButton = Instance.new("Frame")
    moduleButton.Size = UDim2.new(1, -20, 0, 40)
    moduleButton.Position = UDim2.new(0, 10, 0, 0)
    moduleButton.BackgroundColor3 = Color3.fromRGB(15, 15, 17)
    moduleButton.BorderSizePixel = 0
    moduleButton.Name = encryptName("ModuleButton")

    local moduleCorner = Instance.new("UICorner")
    moduleCorner.CornerRadius = UDim.new(0, 6)
    moduleCorner.Parent = moduleButton

    local activeLine = Instance.new("Frame")
    activeLine.Size = UDim2.new(0, 2, 0, 0)
    activeLine.Position = UDim2.new(0, 0, 0.5, 0)
    activeLine.AnchorPoint = Vector2.new(0, 0.5)
    activeLine.BackgroundColor3 = Color3.fromRGB(255, 75, 75)
    activeLine.BorderSizePixel = 0
    activeLine.Transparency = 1
    activeLine.Parent = moduleButton
    activeLine.Name = encryptName("ActiveLine")

    local moduleName = Instance.new("TextLabel")
    moduleName.Size = UDim2.new(1, -20, 1, 0)
    moduleName.Position = UDim2.new(0, 10, 0, 0)
    moduleName.BackgroundTransparency = 1
    moduleName.Text = moduleData.name
    moduleName.TextColor3 = Color3.fromRGB(150, 153, 163)
    moduleName.TextXAlignment = Enum.TextXAlignment.Left
    moduleName.Font = Enum.Font.Gotham
    moduleName.TextSize = 18
    moduleName.Parent = moduleButton
    moduleName.Name = encryptName("ModuleName")

    local textGradient = Instance.new("UIGradient")
    textGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(0.8, 0),
        NumberSequenceKeypoint.new(1, 1)
    })
    textGradient.Parent = moduleName

    local clickDetector = Instance.new("TextButton")
    clickDetector.Size = UDim2.new(1, 0, 1, 0)
    clickDetector.Position = UDim2.new(0, 0, 0, 0)
    clickDetector.BackgroundTransparency = 1
    clickDetector.Text = ""
    clickDetector.ZIndex = 10
    clickDetector.Parent = moduleButton
    clickDetector.Name = encryptName("ClickDetector")

    clickDetector.MouseEnter:Connect(function()
        if not moduleData.enabled then
            tweenColor(moduleButton, "BackgroundColor3", Color3.fromRGB(20, 20, 22), 0.15)
            tweenColor(moduleName, "TextColor3", Color3.fromRGB(180, 183, 193), 0.15)
        end
    end)

    clickDetector.MouseLeave:Connect(function()
        if not moduleData.enabled then
            tweenColor(moduleButton, "BackgroundColor3", Color3.fromRGB(15, 15, 17), 0.15)
            tweenColor(moduleName, "TextColor3", Color3.fromRGB(150, 153, 163), 0.15)
        end
    end)

    clickDetector.MouseButton1Down:Connect(function()
        for _, otherButton in pairs(parent:GetChildren()) do
            if otherButton:IsA("Frame") and otherButton ~= moduleButton then
                local otherLine = otherButton:FindFirstChild("Frame")
                local otherText = otherButton:FindFirstChild("TextLabel")

                if otherLine then 
                    tweenTransparency(otherLine, "Transparency", 1)
                    tweenSize(otherLine, "Size", UDim2.new(0, 2, 0, 0))
                end
                if otherText then 
                    tweenColor(otherText, "TextColor3", Color3.fromRGB(150, 153, 163)) 
                end
                tweenColor(otherButton, "BackgroundColor3", Color3.fromRGB(15, 15, 17))

                local otherIndex = otherButton:GetAttribute("ModuleIndex")
                if otherIndex then
                    if API.modules[moduleSystem.activeCategory] then
                        API.modules[moduleSystem.activeCategory][otherIndex].enabled = false
                    else
                        moduleSystem.modules[moduleSystem.activeCategory][otherIndex].enabled = false
                    end
                end
            end
        end

        moduleData.enabled = not moduleData.enabled

        if moduleData.enabled then
            tweenColor(moduleButton, "BackgroundColor3", Color3.fromRGB(22, 28, 30))
            tweenColor(moduleName, "TextColor3", Color3.fromRGB(255, 75, 75))

            activeLine.Transparency = 0
            tweenSize(activeLine, "Size", UDim2.new(0, 2, 1, -20))

            task.delay(0.1, function()
                slashLabel.Visible = true
                moduleNameLabel.Text = moduleData.name
                tweenColor(moduleNameLabel, "TextColor3", Color3.fromRGB(255, 75, 75))
                moduleSystem.activeModuleName = moduleData.name
                showModuleSettings(_G.mainFrame, moduleData.name)
            end)

            if API.callbacks[moduleData.name] and API.callbacks[moduleData.name].onEnable then
                pcall(API.callbacks[moduleData.name].onEnable)
            end
        else
            tweenColor(moduleButton, "BackgroundColor3", Color3.fromRGB(15, 15, 17))
            tweenColor(moduleName, "TextColor3", Color3.fromRGB(150, 153, 163))

            tweenTransparency(activeLine, "Transparency", 1)
            tweenSize(activeLine, "Size", UDim2.new(0, 2, 0, 0))

            task.delay(0.2, function()
                slashLabel.Visible = false
                moduleNameLabel.Text = ""
                moduleSystem.activeModuleName = nil

                local settingsContainer = _G.mainFrame:FindFirstChild(encryptName("SettingsContainer"))
                if settingsContainer then
                    tweenTransparency(settingsContainer, "BackgroundTransparency", 1)
                    task.delay(0.2, function()
                        for _, child in pairs(settingsContainer:GetChildren()) do
                            if not child:IsA("UICorner") then
                                child:Destroy()
                            end
                        end
                        settingsContainer.Size = UDim2.new(0, 615, 0, 0)
                    end)
                end
            end)

            if API.callbacks[moduleData.name] and API.callbacks[moduleData.name].onDisable then
                pcall(API.callbacks[moduleData.name].onDisable)
            end
        end

        if moduleData.callback then
            pcall(moduleData.callback, moduleData.enabled)
        end
    end)

    if moduleData.enabled then
        moduleButton.BackgroundColor3 = Color3.fromRGB(22, 28, 30)
        moduleName.TextColor3 = Color3.fromRGB(255, 75, 75)
        activeLine.Size = UDim2.new(0, 2, 1, -20)
        activeLine.Transparency = 0
    end

    return moduleButton
end

local function updateModuleList(moduleFrame, categoryName)
    for _, child in pairs(moduleFrame:GetChildren()) do
        if not child:IsA("UIListLayout") then
            child:Destroy()
        end
    end

    local categoryModules = API.modules[categoryName] or moduleSystem.modules[categoryName]
    if categoryModules then
        for index, moduleData in ipairs(categoryModules) do
            local moduleButton = createModuleButton(moduleFrame, moduleData)
            moduleButton:SetAttribute("ModuleIndex", index)
            moduleButton.Parent = moduleFrame

            if moduleData.enabled then
                local activeLine = moduleButton:FindFirstChild("Frame")
                local moduleName = moduleButton:FindFirstChild("TextLabel")

                moduleButton.BackgroundColor3 = Color3.fromRGB(22, 28, 30)
                if activeLine then activeLine.Visible = true end
                if moduleName then moduleName.TextColor3 = Color3.fromRGB(255, 75, 75) end

                slashLabel.Visible = true
                moduleNameLabel.Text = moduleData.name
                moduleNameLabel.TextColor3 = Color3.fromRGB(255, 75, 75)
                moduleSystem.activeModuleName = moduleData.name
                showModuleSettings(_G.mainFrame, moduleData.name)
            end
        end
    end
end

local function createUI()
    local randomGuiName = "UI_" .. generateRandomName()
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = randomGuiName
    screenGui.DisplayOrder = 999 -- Отображение поверх всего
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global -- Контроль слоев
    screenGui.ResetOnSpawn = false
    screenGui.IgnoreGuiInset = true
    addProtectionAttributes(screenGui)
    screenGui.Parent = CoreGui

    -- Система восстановления GUI
    local function checkGuiIntegrity()
        if not screenGui or not screenGui.Parent then
            -- GUI было удалено, восстанавливаем
            screenGui = Instance.new("ScreenGui")
            screenGui.Name = randomGuiName
            screenGui.DisplayOrder = 999
            screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
            screenGui.ResetOnSpawn = false
            screenGui.IgnoreGuiInset = true
            addProtectionAttributes(screenGui)
            screenGui.Parent = CoreGui
            createUI() -- Пересоздаем интерфейс
        elseif _G.mainFrame and not _G.mainFrame.Parent then
            -- Основной фрейм был удален, восстанавливаем
            createUI()
        end
    end

    -- Периодическая проверка целостности
    local integrityCheck = RunService.Heartbeat:Connect(function()
        checkGuiIntegrity()
    end)

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 900, 0, 600)
    mainFrame.Position = UDim2.new(0.5, -450, 0.5, -300)
    mainFrame.BackgroundColor3 = Color3.fromRGB(8, 8, 8)
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    mainFrame.Name = encryptName("MainFrame")
    addProtectionAttributes(mainFrame)

    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 8)
    mainCorner.Parent = mainFrame

    local dragging = false
    local dragStart
    local startPos

    local topBar = Instance.new("Frame")
    topBar.Size = UDim2.new(1, 0, 0, 60)
    topBar.Position = UDim2.new(0, 0, 0, 0)
    topBar.BackgroundTransparency = 1
    topBar.Parent = mainFrame
    topBar.Name = encryptName("TopBar")

    local function updateDrag(input)
        local delta = input.Position - dragStart
        local position = UDim2.new(
            startPos.X.Scale,
            math.floor(startPos.X.Offset + delta.X),
            startPos.Y.Scale,
            math.floor(startPos.Y.Offset + delta.Y)
        )
        TweenService:Create(mainFrame, TweenInfo.new(0.1), {Position = position}):Play()
    end

    topBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position

            local connection
            connection = UIS.InputEnded:Connect(function(inputEnd)
                if inputEnd.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                    connection:Disconnect()
                end
            end)
        end
    end)

    UIS.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateDrag(input)
        end
    end)
    
    local categoryFrame = Instance.new("Frame")
    categoryFrame.Size = UDim2.new(0, 75, 1, -6)
    categoryFrame.Position = UDim2.new(0, 3, 0, 3)
    categoryFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 17)
    categoryFrame.BorderSizePixel = 0
    categoryFrame.Parent = mainFrame
    categoryFrame.Name = encryptName("CategoryFrame")

    local categoryList = Instance.new("ScrollingFrame")
    categoryList.Size = UDim2.new(1, 0, 1, 0)
    categoryList.Position = UDim2.new(0, 12, 0, 100)
    categoryList.BackgroundTransparency = 1
    categoryList.ScrollBarThickness = 0
    categoryList.CanvasSize = UDim2.new(0, 0, 0, 500)
    categoryList.Parent = categoryFrame
    categoryList.Name = encryptName("CategoryList")

    local categoryLayout = Instance.new("UIListLayout")
    categoryLayout.Padding = UDim.new(0, 30)
    categoryLayout.Parent = categoryList

    local ModuleFrame = Instance.new("Frame")
    ModuleFrame.Size = UDim2.new(0, 150, 1, -6)
    ModuleFrame.Position = UDim2.new(0, 80, 0, 3)
    ModuleFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 17)
    ModuleFrame.BorderSizePixel = 0
    ModuleFrame.Parent = mainFrame
    ModuleFrame.Name = encryptName("ModuleFrame")

    local moduleList = Instance.new("ScrollingFrame")
    moduleList.Size = UDim2.new(1, 0, 1, -50)
    moduleList.Position = UDim2.new(0, 10, 0, 100)
    moduleList.BackgroundTransparency = 1
    moduleList.ScrollBarThickness = 0
    moduleList.CanvasSize = UDim2.new(0, 0, 0, 500)
    moduleList.Parent = ModuleFrame
    moduleList.Name = encryptName("ModuleList")

    local moduleLayout = Instance.new("UIListLayout")
    moduleLayout.Padding = UDim.new(0, 10)
    moduleLayout.Parent = moduleList

    local activeCategory = nil

    activeCategoryLabel = Instance.new("TextLabel")
    activeCategoryLabel.Size = UDim2.new(0, 300, 0, 50)
    activeCategoryLabel.Position = UDim2.new(0.5, -350, 0.5, -280)
    activeCategoryLabel.BackgroundTransparency = 1
    activeCategoryLabel.Text = ""
    activeCategoryLabel.TextSize = 22
    activeCategoryLabel.Font = Enum.Font.Gotham
    activeCategoryLabel.TextColor3 = Color3.fromRGB(150, 153, 163)
    activeCategoryLabel.TextXAlignment = Enum.TextXAlignment.Left
    activeCategoryLabel.Parent = mainFrame
    activeCategoryLabel.Name = encryptName("ActiveCategoryLabel")

    slashLabel = Instance.new("TextLabel")
    slashLabel.Size = UDim2.new(0, 20, 0, 50)
    slashLabel.Position = UDim2.new(0.5, -205, 0.5, -280)
    slashLabel.BackgroundTransparency = 1
    slashLabel.Text = "/"
    slashLabel.TextSize = 22
    slashLabel.Font = Enum.Font.Gotham
    slashLabel.TextColor3 = Color3.fromRGB(150, 153, 163)
    slashLabel.TextXAlignment = Enum.TextXAlignment.Left
    slashLabel.Visible = false
    slashLabel.Parent = mainFrame
    slashLabel.Name = encryptName("SlashLabel")

    moduleNameLabel = Instance.new("TextLabel")
    moduleNameLabel.Size = UDim2.new(0, 300, 0, 50)
    moduleNameLabel.Position = UDim2.new(0.5, -190, 0.5, -280)
    moduleNameLabel.BackgroundTransparency = 1
    moduleNameLabel.Text = ""
    moduleNameLabel.TextSize = 22
    moduleNameLabel.Font = Enum.Font.Gotham
    moduleNameLabel.TextColor3 = Color3.fromRGB(255, 75, 75)
    moduleNameLabel.TextXAlignment = Enum.TextXAlignment.Left
    moduleNameLabel.Parent = mainFrame
    moduleNameLabel.Name = encryptName("ModuleNameLabel")

    local UmbrellaIcon = Instance.new("ImageLabel")
    UmbrellaIcon.Size = UDim2.new(0, 50, 0, 50)
    UmbrellaIcon.Position = UDim2.new(0.5, -435, 0.5, -290)
    UmbrellaIcon.BackgroundTransparency = 1
    UmbrellaIcon.Image = "http://www.roblox.com/asset/?id=95285379105237"
    UmbrellaIcon.Parent = mainFrame
    UmbrellaIcon.Name = encryptName("UmbrellaIcon")
    
    local function addCategory(icon, name)
        local categoryButton = Instance.new("Frame")
        categoryButton.Size = UDim2.new(0, 50, 0, 50)
        categoryButton.Position = UDim2.new(0, 5, 0, 5)
        categoryButton.BackgroundColor3 = Color3.fromRGB(15, 15, 17)
        categoryButton.BorderSizePixel = 0
        categoryButton.Parent = categoryList
        categoryButton.Name = encryptName("CategoryButton_" .. name)

        local categoryCorner = Instance.new("UICorner")
        categoryCorner.CornerRadius = UDim.new(0, 8)
        categoryCorner.Parent = categoryButton

        local iconImage = Instance.new("ImageLabel")
        iconImage.Size = UDim2.new(0, 30, 0, 30)
        iconImage.Position = UDim2.new(0.5, -15, 0.5, -15)
        iconImage.BackgroundTransparency = 1
        iconImage.Image = icon
        iconImage.ImageColor3 = Color3.fromRGB(150, 150, 150)
        iconImage.Parent = categoryButton
        iconImage.Name = encryptName("CategoryIcon")

        local redLine = Instance.new("Frame")
        redLine.Size = UDim2.new(0, 2, 0, 0)
        redLine.Position = UDim2.new(0, 0, 0.5, 0)
        redLine.AnchorPoint = Vector2.new(0, 0.5)
        redLine.BackgroundColor3 = Color3.fromRGB(255, 75, 75)
        redLine.Transparency = 1
        redLine.Parent = categoryButton
        redLine.Name = encryptName("RedLine")

        local clickDetector = Instance.new("TextButton")
        clickDetector.Size = UDim2.new(1, 0, 1, 0)
        clickDetector.BackgroundTransparency = 1
        clickDetector.Text = ""
        clickDetector.Parent = categoryButton
        clickDetector.Name = encryptName("CategoryClickDetector")

        clickDetector.MouseEnter:Connect(function()
            if activeCategory ~= categoryButton then
                tweenColor(iconImage, "ImageColor3", Color3.fromRGB(200, 200, 200), 0.15)
            end
        end)

        clickDetector.MouseLeave:Connect(function()
            if activeCategory ~= categoryButton then
                tweenColor(iconImage, "ImageColor3", Color3.fromRGB(150, 150, 150), 0.15)
            end
        end)

        clickDetector.MouseButton1Click:Connect(function()
            if activeCategory == categoryButton then return end

            if activeCategory then
                local prevIcon = activeCategory:FindFirstChild("ImageLabel")
                local prevLine = activeCategory:FindFirstChild("Frame")

                if prevIcon then
                    tweenColor(prevIcon, "ImageColor3", Color3.fromRGB(150, 150, 150))
                end
                if prevLine then
                    tweenTransparency(prevLine, "Transparency", 1)
                    tweenSize(prevLine, "Size", UDim2.new(0, 2, 0, 0))
                end
                tweenColor(activeCategory, "BackgroundColor3", Color3.fromRGB(15, 15, 17))
            end

            activeCategory = categoryButton
            moduleSystem.activeCategory = name

            tweenColor(categoryButton, "BackgroundColor3", Color3.fromRGB(22, 28, 30))
            tweenColor(iconImage, "ImageColor3", Color3.fromRGB(255, 75, 75))

            redLine.Transparency = 0
            tweenSize(redLine, "Size", UDim2.new(0, 2, 0, 20))

            activeCategoryLabel.Text = name
            slashLabel.Visible = false
            moduleNameLabel.Text = ""

            updateModuleList(moduleList, name)
        end)
    end

    addCategory("http://www.roblox.com/asset/?id=103577523623326", "Combat")
    addCategory("http://www.roblox.com/asset/?id=136613041915472", "World")
    addCategory("http://www.roblox.com/asset/?id=85568792810849", "Player")
    addCategory("http://www.roblox.com/asset/?id=124280107087786", "Utility")
    addCategory("http://www.roblox.com/asset/?id=109730932565942", "Farm")
    
    local settingsContainer = Instance.new("Frame")
    settingsContainer.Name = encryptName("SettingsContainer")
    settingsContainer.Size = UDim2.new(0, 615, 1, -110)
    settingsContainer.Position = UDim2.new(0, 257, 0, 90)
    settingsContainer.BackgroundColor3 = Color3.fromRGB(15, 15, 17)
    settingsContainer.BackgroundTransparency = 1
    settingsContainer.Parent = mainFrame

    local settingsCorner = Instance.new("UICorner")
    settingsCorner.CornerRadius = UDim.new(0, 8)
    settingsCorner.Parent = settingsContainer

    _G.mainFrame = mainFrame
end

local function init(config)
    if config and config.moduleSystem then
        for k,v in pairs(config.moduleSystem) do
            moduleSystem[k] = v
        end
    end

    if config and config.moduleSettings then
        for k,v in pairs(config.moduleSettings) do
            API.settings[k] = v
        end
    end

    createUI()
end

return {
    init = init,
    api = API
}
