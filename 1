local player = game:GetService("Players").LocalPlayer
local existingUI = player.PlayerGui:FindFirstChild("MyUI")
if existingUI then
    existingUI:Destroy()
end

local UIS = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")

_G.mainFrame = nil

local activeCategoryLabel
local moduleNameLabel
local slashLabel
local openDropdowns = {}

local API = {
    modules = {},
    settings = {},
    callbacks = {},
    savedSettings = {}
}

local function closeAllDropdowns(except)
    for _, dropdown in pairs(openDropdowns) do
        if dropdown ~= except and dropdown.Close then
            dropdown:Close()
        end
    end
    openDropdowns = {}
    if except then
        table.insert(openDropdowns, except)
    end
end

-- Функция для сохранения настроек
local function saveSettings()
    local success, err = pcall(function()
        writefile("ui_settings.json", HttpService:JSONEncode(API.savedSettings))
    end)
    if not success then
        warn("Failed to save settings:", err)
    end
end

-- Функция для загрузки настроек
local function loadSettings()
    local success, result = pcall(function()
        if isfile("ui_settings.json") then
            return HttpService:JSONDecode(readfile("ui_settings.json"))
        end
        return {}
    end)
    if success then
        API.savedSettings = result or {}
    else
        warn("Failed to load settings:", result)
        API.savedSettings = {}
    end
end

-- Загружаем настройки при старте
loadSettings()

function API:registerModule(category, moduleData)
    self.modules[category] = self.modules[category] or {}
    table.insert(self.modules[category], moduleData)
end

function API:registerSettings(moduleName, settingsTable)
    self.settings[moduleName] = {settings = settingsTable}
    
    -- Загружаем сохраненные значения
    if API.savedSettings[moduleName] then
        for _, setting in ipairs(settingsTable) do
            if API.savedSettings[moduleName][setting.name] ~= nil then
                setting.default = API.savedSettings[moduleName][setting.name]
            end
        end
    end
end

local moduleSystem = {
    activeCategory = nil,
    activeModule = nil,
    activeModuleName = nil,
    modules = API.modules
}

local moduleSettings = API.settings

local function tweenColor(object, property, targetColor, duration)
    local tweenInfo = TweenInfo.new(
        duration or 0.2,
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(object, tweenInfo, {[property] = targetColor})
    tween:Play()
    return tween
end

local function clearSettingsContainer()
    local settingsContainer = _G.mainFrame:FindFirstChild("SettingsContainer")
    if settingsContainer then
        for _, child in pairs(settingsContainer:GetChildren()) do
            if not child:IsA("UICorner") then
                child:Destroy()
            end
        end
        settingsContainer.BackgroundTransparency = 1
        settingsContainer.Size = UDim2.new(0, 615, 0, 0)
    end
end

local function createScrollableContainer(parent, size, position, padding)
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = size
    scrollFrame.Position = position
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.ScrollBarThickness = 0 -- Скрываем скроллбар
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    scrollFrame.Parent = parent
    
    -- Добавляем невидимый скроллбар с анимацией
    local scrollBar = Instance.new("Frame")
    scrollBar.Size = UDim2.new(0, 4, 1, 0)
    scrollBar.Position = UDim2.new(1, -4, 0, 0)
    scrollBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    scrollBar.BorderSizePixel = 0
    scrollBar.Transparency = 1
    scrollBar.Parent = scrollFrame
    
    local scrollBarCorner = Instance.new("UICorner")
    scrollBarCorner.CornerRadius = UDim.new(1, 0)
    scrollBarCorner.Parent = scrollBar
    
    local scrollBarFill = Instance.new("Frame")
    scrollBarFill.Size = UDim2.new(1, 0, 0, 0)
    scrollBarFill.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    scrollBarFill.BorderSizePixel = 0
    scrollBarFill.Parent = scrollBar
    
    local scrollBarFillCorner = Instance.new("UICorner")
    scrollBarFillCorner.CornerRadius = UDim.new(1, 0)
    scrollBarFillCorner.Parent = scrollBarFill
    
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 1, 0)
    container.BackgroundTransparency = 1
    container.Parent = scrollFrame
    
    local layout = Instance.new("UIListLayout")
    layout.Padding = padding
    layout.Parent = container
    
    layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y)
        
        -- Обновляем скроллбар
        local visibleRatio = scrollFrame.AbsoluteWindowSize.Y / scrollFrame.CanvasSize.Y
        scrollBarFill.Size = UDim2.new(1, 0, visibleRatio, 0)
    end)
    
    -- Анимация скроллбара при прокрутке
    scrollFrame:GetPropertyChangedSignal("CanvasPosition"):Connect(function()
        local positionRatio = scrollFrame.CanvasPosition.Y / (scrollFrame.CanvasSize.Y - scrollFrame.AbsoluteWindowSize.Y)
        scrollBarFill.Position = UDim2.new(0, 0, positionRatio * (1 - scrollBarFill.Size.Y.Scale), 0)
    end)
    
    -- Показываем скроллбар при наведении
    scrollFrame.MouseEnter:Connect(function()
        tweenTransparency(scrollBar, "Transparency", 0.5)
    end)
    
    scrollFrame.MouseLeave:Connect(function()
        tweenTransparency(scrollBar, "Transparency", 1)
    end)
    
    return scrollFrame, container
end

local function tweenTransparency(object, property, targetValue, duration)
    local tweenInfo = TweenInfo.new(
        duration or 0.2,
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(object, tweenInfo, {[property] = targetValue})
    tween:Play()
    return tween
end

local function tweenSize(object, property, targetSize, duration)
    local tweenInfo = TweenInfo.new(
        duration or 0.2,
        Enum.EasingStyle.Quad,
        Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(object, tweenInfo, {[property] = targetSize})
    tween:Play()
    return tween
end

local function createDropDown(parent, setting, position)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 280, 0, 50)
    frame.Position = position
    frame.BackgroundTransparency = 1
    frame.ClipsDescendants = true
    frame.Parent = parent

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.6, 0, 1, 0)
    label.Position = UDim2.new(0, 10, 0, 0)
    label.Text = setting.name
    label.TextColor3 = Color3.fromRGB(142, 142, 142)
    label.Font = Enum.Font.SourceSansBold
    label.TextSize = 22
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.BackgroundTransparency = 1
    label.Parent = frame

    local dropDownButton = Instance.new("TextButton")
    dropDownButton.Size = UDim2.new(0, 120, 0, 30)
    dropDownButton.Position = UDim2.new(0.6, 10, 0.5, -15)
    dropDownButton.BackgroundColor3 = Color3.fromRGB(20, 20, 22)
    dropDownButton.BorderSizePixel = 0
    dropDownButton.AutoButtonColor = false
    dropDownButton.Text = ""
    dropDownButton.Parent = frame

    local dropDownCorner = Instance.new("UICorner")
    dropDownCorner.CornerRadius = UDim.new(0, 4)
    dropDownCorner.Parent = dropDownButton

    local selectedText = Instance.new("TextLabel")
    selectedText.Size = UDim2.new(1, -10, 1, 0)
    selectedText.Position = UDim2.new(0, 5, 0, 0)
    selectedText.BackgroundTransparency = 1
    selectedText.Text = setting.default and (setting.multiSelect and table.concat(setting.default, ", ") or setting.default) or "Select..."
    selectedText.TextColor3 = Color3.fromRGB(200, 200, 200)
    selectedText.Font = Enum.Font.SourceSans
    selectedText.TextSize = 18
    selectedText.TextXAlignment = Enum.TextXAlignment.Left
    selectedText.TextTruncate = Enum.TextTruncate.AtEnd
    selectedText.Parent = dropDownButton

    -- Создаем меню в корне GUI, а не внутри фрейма
    local dropDownMenu = Instance.new("Frame")
    dropDownMenu.Size = UDim2.new(0, 120, 0, 0)
    dropDownMenu.BackgroundColor3 = Color3.fromRGB(20, 20, 22)
    dropDownMenu.BorderSizePixel = 0
    dropDownMenu.ClipsDescendants = true
    dropDownMenu.Visible = false
    dropDownMenu.ZIndex = 100
    dropDownMenu.Parent = _G.mainFrame

    local menuCorner = Instance.new("UICorner")
    menuCorner.CornerRadius = UDim.new(0, 4)
    menuCorner.Parent = dropDownMenu

    local menuContainer = Instance.new("ScrollingFrame")
    menuContainer.Size = UDim2.new(1, 0, 1, 0)
    menuContainer.Position = UDim2.new(0, 0, 0, 0)
    menuContainer.BackgroundTransparency = 1
    menuContainer.ScrollBarThickness = 0
    menuContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
    menuContainer.Parent = dropDownMenu

    local menuLayout = Instance.new("UIListLayout")
    menuLayout.Padding = UDim.new(0, 5)
    menuLayout.Parent = menuContainer

    local isOpen = false
    local selectedValues = setting.default and (setting.multiSelect and table.clone(setting.default) or {setting.default}) or {}

    -- Функция для обновления позиции меню
    local function updateMenuPosition()
        local buttonPos = dropDownButton.AbsolutePosition
        local buttonSize = dropDownButton.AbsoluteSize
        dropDownMenu.Position = UDim2.new(0, buttonPos.X, 0, buttonPos.Y + buttonSize.Y + 5)
    end

    -- Функция для закрытия меню
    function frame.Close()
        if isOpen then
            isOpen = false
            dropDownMenu:TweenSize(UDim2.new(0, 120, 0, 0), "Out", "Quad", 0.2, true, function()
                dropDownMenu.Visible = false
            end)
        end
    end

    local function updateMenu()
        for _, child in ipairs(menuContainer:GetChildren()) do
            if child:IsA("Frame") then
                child:Destroy()
            end
        end

        for _, option in ipairs(setting.options) do
            local optionFrame = Instance.new("Frame")
            optionFrame.Size = UDim2.new(1, 0, 0, 30)
            optionFrame.BackgroundTransparency = 1
            optionFrame.Parent = menuContainer

            local optionButton = Instance.new("TextButton")
            optionButton.Size = UDim2.new(1, 0, 1, 0)
            optionButton.BackgroundColor3 = Color3.fromRGB(30, 30, 32)
            optionButton.BorderSizePixel = 0
            optionButton.AutoButtonColor = false
            optionButton.Text = ""
            optionButton.Parent = optionFrame

            local optionCorner = Instance.new("UICorner")
            optionCorner.CornerRadius = UDim.new(0, 4)
            optionCorner.Parent = optionButton

            local optionText = Instance.new("TextLabel")
            optionText.Size = UDim2.new(1, -10, 1, 0)
            optionText.Position = UDim2.new(0, 10, 0, 0)
            optionText.BackgroundTransparency = 1
            optionText.Text = option
            optionText.TextColor3 = Color3.fromRGB(200, 200, 200)
            optionText.Font = Enum.Font.SourceSans
            optionText.TextSize = 18
            optionText.TextXAlignment = Enum.TextXAlignment.Left
            optionText.Parent = optionButton

            local checkIcon = Instance.new("ImageLabel")
            checkIcon.Size = UDim2.new(0, 20, 0, 20)
            checkIcon.Position = UDim2.new(1, -25, 0.5, -10)
            checkIcon.AnchorPoint = Vector2.new(0, 0.5)
            checkIcon.BackgroundTransparency = 1
            checkIcon.Image = "rbxassetid://3926305904"
            checkIcon.ImageRectOffset = Vector2.new(964, 324)
            checkIcon.ImageRectSize = Vector2.new(36, 36)
            checkIcon.ImageColor3 = Color3.fromRGB(255, 75, 75)
            checkIcon.Visible = false
            checkIcon.Parent = optionButton

            if setting.multiSelect then
                checkIcon.Visible = table.find(selectedValues, option) ~= nil
            else
                checkIcon.Visible = selectedValues[1] == option
            end

            optionButton.MouseButton1Click:Connect(function()
                if setting.multiSelect then
                    local index = table.find(selectedValues, option)
                    if index then
                        table.remove(selectedValues, index)
                        checkIcon.Visible = false
                    else
                        table.insert(selectedValues, option)
                        checkIcon.Visible = true
                    end
                else
                    selectedValues = {option}
                    for _, child in ipairs(menuContainer:GetChildren()) do
                        if child:IsA("Frame") then
                            local icon = child:FindFirstChild("ImageLabel")
                            if icon then
                                icon.Visible = child.TextButton.TextLabel.Text == option
                            end
                        end
                    end
                end

                selectedText.Text = setting.multiSelect and table.concat(selectedValues, ", ") or selectedValues[1]
                
                -- Сохраняем настройки
                if not API.savedSettings[setting.moduleName] then
                    API.savedSettings[setting.moduleName] = {}
                end
                API.savedSettings[setting.moduleName][setting.name] = setting.multiSelect and selectedValues or selectedValues[1]
                saveSettings()
                
                if setting.callback then
                    setting.callback(setting.multiSelect and selectedValues or selectedValues[1])
                end
            end)
        end

        menuContainer.CanvasSize = UDim2.new(0, 0, 0, #setting.options * 35)
    end

    local function toggleMenu()
        isOpen = not isOpen
        if isOpen then
            closeAllDropdowns(frame)
            updateMenuPosition()
            updateMenu()
            dropDownMenu.Visible = true
            dropDownMenu:TweenSize(UDim2.new(0, 120, 0, math.min(#setting.options * 35, 200)), "Out", "Quad", 0.2, true)
        else
            frame:Close()
        end
    end

    dropDownButton.MouseButton1Click:Connect(toggleMenu)

    -- Закрытие при клике вне меню
    local connection
    dropDownButton.MouseButton1Click:Connect(function()
        if connection then connection:Disconnect() end
        connection = UIS.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                local mousePos = input.Position
                if not dropDownMenu.AbsoluteRect:PointInside(mousePos) and not dropDownButton.AbsoluteRect:PointInside(mousePos) then
                    frame:Close()
                    connection:Disconnect()
                end
            end
        end)
    end)

    return frame
end


local function createTextField(parent, setting, position)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 280, 0, 50)
    frame.Position = position
    frame.BackgroundTransparency = 1
    frame.Parent = parent

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.6, 0, 1, 0)
    label.Position = UDim2.new(0, 10, 0, 0)
    label.Text = setting.name
    label.TextColor3 = Color3.fromRGB(142, 142, 142)
    label.Font = Enum.Font.SourceSansBold
    label.TextSize = 22
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.BackgroundTransparency = 1
    label.Parent = frame

    local textBoxBackground = Instance.new("Frame")
    textBoxBackground.Size = UDim2.new(0, 120, 0, 30)
    textBoxBackground.Position = UDim2.new(0.7, 280, 0.5, -15)
    textBoxBackground.BackgroundColor3 = Color3.fromRGB(20, 20, 22)
    textBoxBackground.BorderSizePixel = 0
    textBoxBackground.Parent = frame

    local textBoxCorner = Instance.new("UICorner")
    textBoxCorner.CornerRadius = UDim.new(0, 4)
    textBoxCorner.Parent = textBoxBackground

    local textBox = Instance.new("TextBox")
    textBox.Size = UDim2.new(1, -10, 1, -4)
    textBox.Position = UDim2.new(0, 5, 0, 2)
    textBox.BackgroundTransparency = 1
    textBox.Text = setting.default or ""
    textBox.TextColor3 = Color3.fromRGB(200, 200, 200)
    textBox.Font = Enum.Font.SourceSans
    textBox.TextSize = 18
    textBox.TextXAlignment = Enum.TextXAlignment.Left
    textBox.PlaceholderText = setting.placeholder or ""
    textBox.PlaceholderColor3 = Color3.fromRGB(100, 100, 100)
    textBox.Parent = textBoxBackground

    local function updateValue()
        -- Сохраняем настройки
        if not API.savedSettings[setting.moduleName] then
            API.savedSettings[setting.moduleName] = {}
        end
        API.savedSettings[setting.moduleName][setting.name] = textBox.Text
        saveSettings()
        
        if setting.callback then
            setting.callback(textBox.Text)
        end
    end

    textBox.FocusLost:Connect(function()
        updateValue()
    end)

    return frame
end

local function createSlider(parent, setting, position)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 600, 0, 120)
    frame.Position = position
    frame.BackgroundTransparency = 1
    frame.Parent = parent

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 0.2, 10)
    label.Position = UDim2.new(0, 15, 0.3, 0)
    label.Text = setting.name
    label.TextColor3 = Color3.fromRGB(142, 142, 142)
    label.Font = Enum.Font.SourceSansBold
    label.TextSize = 22
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.BackgroundTransparency = 1
    label.Parent = frame

    local valueDisplay = Instance.new("TextLabel")
    valueDisplay.Size = UDim2.new(1, 0, 0.2, 0)
    valueDisplay.Position = UDim2.new(0, -5, 0.3, 0)
    valueDisplay.Text = tostring(setting.default) .. (setting.isPercentage and "%" or "")
    valueDisplay.TextColor3 = Color3.fromRGB(142, 142, 142)
    valueDisplay.Font = Enum.Font.SourceSans
    valueDisplay.TextSize = 22
    valueDisplay.TextXAlignment = Enum.TextXAlignment.Right
    valueDisplay.BackgroundTransparency = 1
    valueDisplay.Parent = frame

    local sliderBackground = Instance.new("Frame")
    sliderBackground.Size = UDim2.new(1, -11, 0, 6)
    sliderBackground.Position = UDim2.new(0, 10, 0.6, -3)
    sliderBackground.BackgroundColor3 = Color3.fromRGB(142, 142, 142)
    sliderBackground.BorderSizePixel = 0
    sliderBackground.Parent = frame

    local sliderActive = Instance.new("Frame")
    sliderActive.Size = UDim2.new((setting.default - setting.min) / (setting.max - setting.min), 0, 1, 0)
    sliderActive.BackgroundColor3 = Color3.fromRGB(255, 75, 75)
    sliderActive.BorderSizePixel = 0
    sliderActive.Parent = sliderBackground

    local sliderBackgroundCorner = Instance.new("UICorner")
    sliderBackgroundCorner.CornerRadius = UDim.new(0, 4)
    sliderBackgroundCorner.Parent = sliderBackground

    local sliderActiveCorner = Instance.new("UICorner") 
    sliderActiveCorner.CornerRadius = UDim.new(0, 4)
    sliderActiveCorner.Parent = sliderActive

    local sliderCircle = Instance.new("Frame")
    sliderCircle.Size = UDim2.new(0, 12, 0, 12)
    sliderCircle.Position = UDim2.new((setting.default - setting.min) / (setting.max - setting.min), -6, 0.5, -6)
    sliderCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    sliderCircle.BorderSizePixel = 0
    sliderCircle.Parent = sliderBackground

    local circleCorner = Instance.new("UICorner")
    circleCorner.CornerRadius = UDim.new(1, 0)
    circleCorner.Parent = sliderCircle

    local dragging = false

    local function updateSlider(value)
        local relativePos = (value - setting.min) / (setting.max - setting.min)
        sliderCircle.Position = UDim2.new(relativePos, -6, 0.5, -6)
        sliderActive.Size = UDim2.new(relativePos, 0, 1, 0)
        valueDisplay.Text = tostring(value) .. (setting.isPercentage and "%" or "")
        
        -- Сохраняем настройки
        if not API.savedSettings[setting.moduleName] then
            API.savedSettings[setting.moduleName] = {}
        end
        API.savedSettings[setting.moduleName][setting.name] = value
        saveSettings()
        
        if setting.callback then
            setting.callback(value)
        end
    end

    sliderCircle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            sliderCircle:TweenSize(UDim2.new(0, 15, 0, 15), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
        end
    end)

    sliderCircle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
            sliderCircle:TweenSize(UDim2.new(0, 12, 0, 12), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = input.Position.X
            local sliderStart = sliderBackground.AbsolutePosition.X
            local sliderEnd = sliderStart + sliderBackground.AbsoluteSize.X
            local newX = math.clamp(mousePos, sliderStart, sliderEnd)

            local relativePos = (newX - sliderStart) / sliderBackground.AbsoluteSize.X
            local newValue = math.floor(relativePos * (setting.max - setting.min) + setting.min)
            updateSlider(newValue)
        end
    end)

    updateSlider(setting.default)
    return frame
end

local function createToggle(parent, setting, position)
    local outerFrame = Instance.new("Frame")
    outerFrame.Size = UDim2.new(0, 280, 0, 50)
    outerFrame.Position = position
    outerFrame.BackgroundTransparency = 1
    outerFrame.BorderSizePixel = 0
    outerFrame.Parent = parent

    local enableLabel = Instance.new("TextLabel")
    enableLabel.Size = UDim2.new(0.6, 0, 1, 0)
    enableLabel.Position = UDim2.new(0, 10, 0, 0)
    enableLabel.Text = setting.name
    enableLabel.TextColor3 = Color3.fromRGB(142, 142, 142)
    enableLabel.Font = Enum.Font.SourceSansBold
    enableLabel.TextSize = 22
    enableLabel.TextXAlignment = Enum.TextXAlignment.Left
    enableLabel.BackgroundTransparency = 1
    enableLabel.Parent = outerFrame

    local switchTrack = Instance.new("Frame")
    switchTrack.Size = UDim2.new(0, 40, 0, 20)
    switchTrack.Position = UDim2.new(0.8, 330, 0.5, -5)
    switchTrack.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    switchTrack.BorderSizePixel = 0
    switchTrack.Parent = outerFrame

    local trackCorner = Instance.new("UICorner")
    trackCorner.CornerRadius = UDim.new(1, 0)
    trackCorner.Parent = switchTrack

    local switchCircle = Instance.new("Frame")
    switchCircle.Size = UDim2.new(0, 18, 0, 18)
    switchCircle.Position = UDim2.new(0, 1, 0, 1)
    switchCircle.BackgroundColor3 = Color3.fromRGB(142, 142, 142)
    switchCircle.BorderSizePixel = 0
    switchCircle.Parent = switchTrack

    local circleCorner = Instance.new("UICorner")
    circleCorner.CornerRadius = UDim.new(1, 0)
    circleCorner.Parent = switchCircle

    local isEnabled = setting.default
    if isEnabled then
        switchCircle.Position = UDim2.new(1, -19, 0, 1)
        switchCircle.BackgroundColor3 = Color3.fromRGB(255, 75, 75)
    end

    switchTrack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isEnabled = not isEnabled
            if isEnabled then
                switchCircle:TweenPosition(UDim2.new(1, -19, 0, 1), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
                switchCircle.BackgroundColor3 = Color3.fromRGB(255, 75, 75)
            else
                switchCircle:TweenPosition(UDim2.new(0, 1, 0, 1), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
                switchCircle.BackgroundColor3 = Color3.fromRGB(142, 142, 142)
            end
            
            -- Сохраняем настройки
            if not API.savedSettings[setting.moduleName] then
                API.savedSettings[setting.moduleName] = {}
            end
            API.savedSettings[setting.moduleName][setting.name] = isEnabled
            saveSettings()
            
            if setting.callback then
                setting.callback(isEnabled)
            end
        end
    end)

    return outerFrame
end

function API:saveSettings()
    saveSettings()
end

function API:loadSettings()
    loadSettings()
    
    -- Применяем загруженные настройки ко всем модулям
    for moduleName, settings in pairs(self.settings) do
        if self.savedSettings[moduleName] then
            for _, setting in ipairs(settings.settings) do
                if self.savedSettings[moduleName][setting.name] ~= nil then
                    setting.default = self.savedSettings[moduleName][setting.name]
                end
            end
        end
    end
end

local function showModuleSettings(moduleName)
    clearSettingsContainer()
    API:loadSettings() -- Загружаем настройки перед отображением
    
    local settingsContainer = _G.mainFrame:FindFirstChild("SettingsContainer")
    if not settingsContainer then return end
    
    local settings = API.settings[moduleName] or moduleSettings[moduleName]
    if not settings or not settings.settings or #settings.settings == 0 then
        return
    end
    
    settingsContainer.BackgroundTransparency = 0
    settingsContainer.Size = UDim2.new(0, 615, 1, -110)
    
    local scrollFrame, container = createScrollableContainer(
        settingsContainer,
        UDim2.new(1, -10, 1, -10),
        UDim2.new(0, 5, 0, 5),
        UDim.new(0, 15)
    )
    
    local yOffset = 0
    for _, setting in ipairs(settings.settings) do
        setting.moduleName = moduleName
        
        if setting.type == "slider" then
            local slider = createSlider(container, setting, UDim2.new(0, 0, 0, yOffset))
            yOffset = yOffset + 15
        elseif setting.type == "toggle" then
            local toggle = createToggle(container, setting, UDim2.new(0, 0, 0, yOffset))
            yOffset = yOffset + 15
        elseif setting.type == "textfield" then
            local textField = createTextField(container, setting, UDim2.new(0, 0, 0, yOffset))
            yOffset = yOffset + 15
        elseif setting.type == "dropdown" then
            local dropDown = createDropDown(container, setting, UDim2.new(0, 0, 0, yOffset))
            yOffset = yOffset + 20
        end
    end
end

local function createModuleButton(parent, moduleData)
    local moduleButton = Instance.new("Frame")
    moduleButton.Size = UDim2.new(1, -20, 0, 40)
    moduleButton.Position = UDim2.new(0, 10, 0, 0)
    moduleButton.BackgroundColor3 = Color3.fromRGB(15, 15, 17)
    moduleButton.BorderSizePixel = 0
    moduleButton.Parent = parent

    local moduleCorner = Instance.new("UICorner")
    moduleCorner.CornerRadius = UDim.new(0, 6)
    moduleCorner.Parent = moduleButton

    local activeLine = Instance.new("Frame")
    activeLine.Size = UDim2.new(0, 2, 0, 0)
    activeLine.Position = UDim2.new(0, 0, 0.5, 0)
    activeLine.AnchorPoint = Vector2.new(0, 0.5)
    activeLine.BackgroundColor3 = Color3.fromRGB(255, 75, 75)
    activeLine.BorderSizePixel = 0
    activeLine.Transparency = 1
    activeLine.Parent = moduleButton

    local moduleName = Instance.new("TextLabel")
    moduleName.Size = UDim2.new(1, -20, 1, 0)
    moduleName.Position = UDim2.new(0, 10, 0, 0)
    moduleName.BackgroundTransparency = 1
    moduleName.Text = moduleData.name
    moduleName.TextColor3 = Color3.fromRGB(150, 153, 163)
    moduleName.TextXAlignment = Enum.TextXAlignment.Left
    moduleName.Font = Enum.Font.Gotham
    moduleName.TextSize = 18
    moduleName.Parent = moduleButton

    local textGradient = Instance.new("UIGradient")
    textGradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(0.8, 0),
        NumberSequenceKeypoint.new(1, 1)
    })
    textGradient.Parent = moduleName

    local clickDetector = Instance.new("TextButton")
    clickDetector.Size = UDim2.new(1, 0, 1, 0)
    clickDetector.Position = UDim2.new(0, 0, 0, 0)
    clickDetector.BackgroundTransparency = 1
    clickDetector.Text = ""
    clickDetector.ZIndex = 10
    clickDetector.Parent = moduleButton

    local debounce = false

    clickDetector.MouseEnter:Connect(function()
        if not moduleData.enabled then
            tweenColor(moduleButton, "BackgroundColor3", Color3.fromRGB(20, 20, 22), 0.15)
            tweenColor(moduleName, "TextColor3", Color3.fromRGB(180, 183, 193), 0.15)
        end
    end)

    clickDetector.MouseLeave:Connect(function()
        if not moduleData.enabled then
            tweenColor(moduleButton, "BackgroundColor3", Color3.fromRGB(15, 15, 17), 0.15)
            tweenColor(moduleName, "TextColor3", Color3.fromRGB(150, 153, 163), 0.15)
        end
    end)

    clickDetector.MouseButton1Click:Connect(function()
        if debounce then return end
        debounce = true

        for _, otherButton in pairs(parent:GetChildren()) do
            if otherButton:IsA("Frame") and otherButton ~= moduleButton then
                local otherLine = otherButton:FindFirstChild("Frame")
                local otherText = otherButton:FindFirstChild("TextLabel")
                local otherIndex = otherButton:GetAttribute("ModuleIndex")

                if otherLine then 
                    tweenTransparency(otherLine, "Transparency", 1)
                    tweenSize(otherLine, "Size", UDim2.new(0, 2, 0, 0))
                end
                if otherText then 
                    tweenColor(otherText, "TextColor3", Color3.fromRGB(150, 153, 163)) 
                end
                tweenColor(otherButton, "BackgroundColor3", Color3.fromRGB(15, 15, 17))

                if otherIndex then
                    if API.modules[moduleSystem.activeCategory] then
                        API.modules[moduleSystem.activeCategory][otherIndex].enabled = false
                    else
                        moduleSystem.modules[moduleSystem.activeCategory][otherIndex].enabled = false
                    end
                end
            end
        end

        moduleData.enabled = not moduleData.enabled

        if moduleData.enabled then
            tweenColor(moduleButton, "BackgroundColor3", Color3.fromRGB(22, 28, 30))
            tweenColor(moduleName, "TextColor3", Color3.fromRGB(255, 75, 75))

            activeLine.Transparency = 0
            tweenSize(activeLine, "Size", UDim2.new(0, 2, 1, -20))

            task.delay(0.1, function()
                slashLabel.Visible = true
                moduleNameLabel.Text = moduleData.name
                tweenColor(moduleNameLabel, "TextColor3", Color3.fromRGB(255, 75, 75))
                moduleSystem.activeModuleName = moduleData.name
                showModuleSettings(moduleData.name)
            end)

            if API.callbacks[moduleData.name] and API.callbacks[moduleData.name].onEnable then
                pcall(API.callbacks[moduleData.name].onEnable)
            end
        else
            tweenColor(moduleButton, "BackgroundColor3", Color3.fromRGB(15, 15, 17))
            tweenColor(moduleName, "TextColor3", Color3.fromRGB(150, 153, 163))

            tweenTransparency(activeLine, "Transparency", 1)
            tweenSize(activeLine, "Size", UDim2.new(0, 2, 0, 0))

            task.delay(0.2, function()
                slashLabel.Visible = false
                moduleNameLabel.Text = ""
                moduleSystem.activeModuleName = nil
                clearSettingsContainer()
            end)

            if API.callbacks[moduleData.name] and API.callbacks[moduleData.name].onDisable then
                pcall(API.callbacks[moduleData.name].onDisable)
            end
        end

        if moduleData.callback then
            pcall(moduleData.callback, moduleData.enabled)
        end

        debounce = false
    end)

    if moduleData.enabled then
        moduleButton.BackgroundColor3 = Color3.fromRGB(22, 28, 30)
        moduleName.TextColor3 = Color3.fromRGB(255, 75, 75)
        activeLine.Size = UDim2.new(0, 2, 1, -20)
        activeLine.Transparency = 0
    end

    return moduleButton
end

local function updateModuleList(moduleFrame, categoryName)
    for _, child in pairs(moduleFrame:GetChildren()) do
        if not child:IsA("UIListLayout") then
            child:Destroy()
        end
    end

    local categoryModules = API.modules[categoryName] or moduleSystem.modules[categoryName]
    if categoryModules then
        for index, moduleData in ipairs(categoryModules) do
            local moduleButton = createModuleButton(moduleFrame, moduleData)
            moduleButton:SetAttribute("ModuleIndex", index)
            moduleButton.Parent = moduleFrame

            if moduleData.enabled then
                local activeLine = moduleButton:FindFirstChild("Frame")
                local moduleName = moduleButton:FindFirstChild("TextLabel")

                moduleButton.BackgroundColor3 = Color3.fromRGB(22, 28, 30)
                if activeLine then activeLine.Visible = true end
                if moduleName then moduleName.TextColor3 = Color3.fromRGB(255, 75, 75) end

                slashLabel.Visible = true
                moduleNameLabel.Text = moduleData.name
                moduleNameLabel.TextColor3 = Color3.fromRGB(255, 75, 75)
                moduleSystem.activeModuleName = moduleData.name
                showModuleSettings(moduleData.name)
            end
        end
    end
end

local function createUI()
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "MyUI"
    screenGui.Parent = player:WaitForChild("PlayerGui")

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 900, 0, 600)
    mainFrame.Position = UDim2.new(0.5, -450, 0.5, -300)
    mainFrame.BackgroundColor3 = Color3.fromRGB(8, 8, 8)
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui

    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 8)
    mainCorner.Parent = mainFrame

    local dragging = false
    local dragStart
    local startPos

    local topBar = Instance.new("Frame")
    topBar.Size = UDim2.new(1, 0, 0, 60)
    topBar.Position = UDim2.new(0, 0, 0, 0)
    topBar.BackgroundTransparency = 1
    topBar.Parent = mainFrame

    local function updateDrag(input)
        local delta = input.Position - dragStart
        local position = UDim2.new(
            startPos.X.Scale,
            math.floor(startPos.X.Offset + delta.X),
            startPos.Y.Scale,
            math.floor(startPos.Y.Offset + delta.Y)
        )
        TweenService:Create(mainFrame, TweenInfo.new(0.1), {Position = position}):Play()
    end

    topBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position

            local connection
            connection = UIS.InputEnded:Connect(function(inputEnd)
                if inputEnd.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                    connection:Disconnect()
                end
            end)
        end
    end)

    UIS.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateDrag(input)
        end
    end)
    
    local categoryFrame = Instance.new("Frame")
    categoryFrame.Size = UDim2.new(0, 75, 1, -6)
    categoryFrame.Position = UDim2.new(0, 3, 0, 3)
    categoryFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 17)
    categoryFrame.BorderSizePixel = 0
    categoryFrame.Parent = mainFrame

    local categoryList = Instance.new("ScrollingFrame")
    categoryList.Size = UDim2.new(1, 0, 1, 0)
    categoryList.Position = UDim2.new(0, 12, 0, 100)
    categoryList.BackgroundTransparency = 1
    categoryList.ScrollBarThickness = 0
    categoryList.CanvasSize = UDim2.new(0, 0, 0, 500)
    categoryList.Parent = categoryFrame

    local categoryLayout = Instance.new("UIListLayout")
    categoryLayout.Padding = UDim.new(0, 30)
    categoryLayout.Parent = categoryList

    local ModuleFrame = Instance.new("Frame")
    ModuleFrame.Size = UDim2.new(0, 150, 1, -6)
    ModuleFrame.Position = UDim2.new(0, 80, 0, 3)
    ModuleFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 17)
    ModuleFrame.BorderSizePixel = 0
    ModuleFrame.Parent = mainFrame

    local moduleList = Instance.new("ScrollingFrame")
    moduleList.Size = UDim2.new(1, 0, 1, -50)
    moduleList.Position = UDim2.new(0, 10, 0, 100)
    moduleList.BackgroundTransparency = 1
    moduleList.ScrollBarThickness = 0
    moduleList.CanvasSize = UDim2.new(0, 0, 0, 500)
    moduleList.Parent = ModuleFrame

    local moduleLayout = Instance.new("UIListLayout")
    moduleLayout.Padding = UDim.new(0, 10)
    moduleLayout.Parent = moduleList

    local activeCategory = nil

    activeCategoryLabel = Instance.new("TextLabel")
    activeCategoryLabel.Size = UDim2.new(0, 300, 0, 50)
    activeCategoryLabel.Position = UDim2.new(0.5, -350, 0.5, -280)
    activeCategoryLabel.BackgroundTransparency = 1
    activeCategoryLabel.Text = ""
    activeCategoryLabel.TextSize = 22
    activeCategoryLabel.Font = Enum.Font.Gotham
    activeCategoryLabel.TextColor3 = Color3.fromRGB(150, 153, 163)
    activeCategoryLabel.TextXAlignment = Enum.TextXAlignment.Left
    activeCategoryLabel.Parent = mainFrame

    slashLabel = Instance.new("TextLabel")
    slashLabel.Size = UDim2.new(0, 20, 0, 50)
    slashLabel.Position = UDim2.new(0.5, -205, 0.5, -280)
    slashLabel.BackgroundTransparency = 1
    slashLabel.Text = "/"
    slashLabel.TextSize = 22
    slashLabel.Font = Enum.Font.Gotham
    slashLabel.TextColor3 = Color3.fromRGB(150, 153, 163)
    slashLabel.TextXAlignment = Enum.TextXAlignment.Left
    slashLabel.Visible = false
    slashLabel.Parent = mainFrame

    moduleNameLabel = Instance.new("TextLabel")
    moduleNameLabel.Size = UDim2.new(0, 300, 0, 50)
    moduleNameLabel.Position = UDim2.new(0.5, -190, 0.5, -280)
    moduleNameLabel.BackgroundTransparency = 1
    moduleNameLabel.Text = ""
    moduleNameLabel.TextSize = 22
    moduleNameLabel.Font = Enum.Font.Gotham
    moduleNameLabel.TextColor3 = Color3.fromRGB(255, 75, 75)
    moduleNameLabel.TextXAlignment = Enum.TextXAlignment.Left
    moduleNameLabel.Parent = mainFrame

    local UmbrellaIcon = Instance.new("ImageLabel")
    UmbrellaIcon.Size = UDim2.new(0, 50, 0, 50)
    UmbrellaIcon.Position = UDim2.new(0.5, -435, 0.5, -290)
    UmbrellaIcon.BackgroundTransparency = 1
    UmbrellaIcon.Image = "http://www.roblox.com/asset/?id=95285379105237"
    UmbrellaIcon.Parent = mainFrame
    
    local function addCategory(icon, name)
        local categoryButton = Instance.new("Frame")
        categoryButton.Size = UDim2.new(0, 50, 0, 50)
        categoryButton.Position = UDim2.new(0, 5, 0, 5)
        categoryButton.BackgroundColor3 = Color3.fromRGB(15, 15, 17)
        categoryButton.BorderSizePixel = 0
        categoryButton.Parent = categoryList

        local categoryCorner = Instance.new("UICorner")
        categoryCorner.CornerRadius = UDim.new(0, 8)
        categoryCorner.Parent = categoryButton

        local iconImage = Instance.new("ImageLabel")
        iconImage.Size = UDim2.new(0, 30, 0, 30)
        iconImage.Position = UDim2.new(0.5, -15, 0.5, -15)
        iconImage.BackgroundTransparency = 1
        iconImage.Image = icon
        iconImage.ImageColor3 = Color3.fromRGB(150, 150, 150)
        iconImage.Parent = categoryButton

        local redLine = Instance.new("Frame")
        redLine.Size = UDim2.new(0, 2, 0, 0)
        redLine.Position = UDim2.new(0, 0, 0.5, 0)
        redLine.AnchorPoint = Vector2.new(0, 0.5)
        redLine.BackgroundColor3 = Color3.fromRGB(255, 75, 75)
        redLine.Transparency = 1
        redLine.Parent = categoryButton

        local clickDetector = Instance.new("TextButton")
        clickDetector.Size = UDim2.new(1, 0, 1, 0)
        clickDetector.BackgroundTransparency = 1
        clickDetector.Text = ""
        clickDetector.Parent = categoryButton

        clickDetector.MouseEnter:Connect(function()
            if activeCategory ~= categoryButton then
                tweenColor(iconImage, "ImageColor3", Color3.fromRGB(200, 200, 200), 0.15)
            end
        end)

        clickDetector.MouseLeave:Connect(function()
            if activeCategory ~= categoryButton then
                tweenColor(iconImage, "ImageColor3", Color3.fromRGB(150, 150, 150), 0.15)
            end
        end)

        clickDetector.MouseButton1Click:Connect(function()
            if activeCategory == categoryButton then return end

            if activeCategory then
                local prevIcon = activeCategory:FindFirstChild("ImageLabel")
                local prevLine = activeCategory:FindFirstChild("Frame")

                if prevIcon then
                    tweenColor(prevIcon, "ImageColor3", Color3.fromRGB(150, 150, 150))
                end
                if prevLine then
                    tweenTransparency(prevLine, "Transparency", 1)
                    tweenSize(prevLine, "Size", UDim2.new(0, 2, 0, 0))
                end
                tweenColor(activeCategory, "BackgroundColor3", Color3.fromRGB(15, 15, 17))
            end

            activeCategory = categoryButton
            moduleSystem.activeCategory = name

            tweenColor(categoryButton, "BackgroundColor3", Color3.fromRGB(22, 28, 30))
            tweenColor(iconImage, "ImageColor3", Color3.fromRGB(255, 75, 75))

            redLine.Transparency = 0
            tweenSize(redLine, "Size", UDim2.new(0, 2, 0, 20))

            activeCategoryLabel.Text = name
            slashLabel.Visible = false
            moduleNameLabel.Text = ""

            updateModuleList(moduleList, name)
        end)
    end

    addCategory("http://www.roblox.com/asset/?id=103577523623326", "Network")
    addCategory("http://www.roblox.com/asset/?id=136613041915472", "World")
    addCategory("http://www.roblox.com/asset/?id=85568792810849", "Player")
    addCategory("http://www.roblox.com/asset/?id=124280107087786", "Utility")
    addCategory("http://www.roblox.com/asset/?id=109730932565942", "Combat")
    
    local settingsContainer = Instance.new("Frame")
    settingsContainer.Name = "SettingsContainer"
    settingsContainer.Size = UDim2.new(0, 615, 0, 0)
    settingsContainer.Position = UDim2.new(0, 257, 0, 90)
    settingsContainer.BackgroundColor3 = Color3.fromRGB(15, 15, 17)
    settingsContainer.BackgroundTransparency = 1
    settingsContainer.Parent = mainFrame

    local settingsCorner = Instance.new("UICorner")
    settingsCorner.CornerRadius = UDim.new(0, 8)
    settingsCorner.Parent = settingsContainer

    _G.mainFrame = mainFrame
end

local function init(config)
    if config and config.moduleSystem then
        for k,v in pairs(config.moduleSystem) do
            moduleSystem[k] = v
        end
    end

    if config and config.moduleSettings then
        for k,v in pairs(config.moduleSettings) do
            API.settings[k] = v
            moduleSettings[k] = v
        end
    end

    createUI()
end

return {
    init = init,
    api = API
}
